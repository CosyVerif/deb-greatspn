#ifndef lint
static char yysccsid[] = "@(#)yaccpar	1.9 (Berkeley) 02/21/93";
#endif
#define YYBYACC 1
#define YYMAJOR 1
#define YYMINOR 9
#define yyclearin (yychar=(-1))
#define yyerrok (yyerrflag=0)
#define YYRECOVERING (yyerrflag!=0)
#define YYPREFIX "yy"
#line 2 "res_stndrd.yacc"

static int_val;

static char res_name[200];

#define EQUAL_TO 1
#define NOTEQUAL_TO 2
#define GREATER_EQUAL 3
#define GREATER_THAN 4
#define LESS_EQUAL 5
#define LESS_THAN 6

#define SUM 11
#define SUB 12
#define MUL 13
#define DIV 14

#line 30 "y.tab.c"
#define RES_NAME 257
#define COLON 258
#define END_RES 259
#define SEMICOLON 260
#define SUM_OP 261
#define MULT_OP 262
#define SS_PROB 263
#define TR_PROB 264
#define SS_MEAN 265
#define TR_MEAN 266
#define C_BRACE 267
#define OPEN 268
#define CLOSE 269
#define COND_SIGN 270
#define L_NOT 271
#define L_AND 272
#define L_OR 273
#define PLACE_NAME 274
#define COMP_OP 275
#define INTEGER 276
#define MARK_PAR 277
#define RATE_PAR 278
#define EXP 279
#define POINT 280
#define ERROR 281
#define YYERRCODE 256
short yylhs[] = {                                        -1,
    0,    0,    1,    1,    5,    2,    7,    4,    4,    9,
    6,    6,    6,   11,    8,   12,    8,   13,    8,   14,
    8,    8,    8,    8,   16,    8,   10,   10,   17,   17,
   18,   18,   19,   19,   22,   23,   20,   21,   21,   21,
   15,   15,   15,   15,   24,   24,   27,   25,   25,   26,
   26,    3,
};
short yylen[] = {                                         2,
    2,    1,    2,    1,    0,    7,    0,    4,    1,    0,
    4,    2,    1,    0,    4,    0,    4,    0,    6,    0,
    6,    3,    3,    1,    0,    4,    3,    1,    3,    1,
    2,    1,    3,    1,    0,    0,    5,    1,    1,    1,
    1,    1,    1,    1,    2,    1,    0,    4,    2,    1,
    0,    3,
};
short yydefred[] = {                                      0,
    0,    2,    0,    0,    4,    0,    0,    1,    3,    0,
    0,   52,    5,    0,   14,   16,    0,    0,   25,    0,
   43,   44,    0,    0,    0,   13,   24,   41,    0,    0,
    0,    0,    0,    0,   47,   50,   49,    6,    7,   10,
   12,   45,    0,    0,   40,   38,   39,    0,    0,   30,
   32,   34,   35,    0,   22,   18,   23,   20,    0,    0,
    0,    0,    0,   31,   15,    0,    0,    0,   17,    0,
    0,   26,   48,    0,   11,   33,    0,   29,   36,    0,
    0,    0,   19,   21,   37,
};
short yydgoto[] = {                                       3,
    4,    5,    7,   24,   14,   25,   61,   26,   62,   48,
   30,   31,   70,   71,   27,   34,   49,   50,   51,   52,
   53,   68,   82,   28,   29,   37,   60,
};
short yysindex[] = {                                   -243,
 -253,    0,    0, -221,    0, -217, -253,    0,    0, -202,
 -178,    0,    0, -187,    0,    0, -192, -177,    0, -179,
    0,    0, -157, -199, -193,    0,    0,    0, -159, -259,
 -259, -153, -152, -187,    0,    0,    0,    0,    0,    0,
    0,    0, -259, -229,    0,    0,    0, -168, -164,    0,
    0,    0,    0, -167,    0,    0,    0,    0, -204, -157,
 -187, -187, -209,    0,    0, -259, -259, -154,    0, -259,
 -259,    0,    0, -193,    0,    0, -164,    0,    0, -163,
 -160, -165,    0,    0,    0,
};
short yyrindex[] = {                                      0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -210,
    0,    0, -258,    0, -236,    0,    0,    0, -234,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -181,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -258,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -166,    0,    0, -171,    0,    0,    0,
    0,    0,    0,    0,    0,
};
short yygindex[] = {                                      0,
    0,  112,  115,   89,    0,   63,    0,  -25,    0,  -30,
    0,    0,    0,    0,    0,    0,   59,   60,   82,    0,
   46,    0,    0,    0,    0,   69,    0,
};
#define YYTABLESIZE 129
short yytable[] = {                                      41,
   54,   51,   51,   51,   51,   51,   51,   51,   43,   51,
   51,   44,   63,    1,   45,    2,   46,   47,   51,   51,
   51,   51,    6,    9,    9,   46,   46,   46,   46,   46,
   46,   46,    9,   46,   46,    1,   75,    8,   43,   80,
   81,   46,   46,   46,   45,   46,   46,   47,   41,   42,
   42,   42,   42,   42,   42,   42,   39,   42,   42,   76,
   38,   39,   10,   66,   72,   42,   42,   42,   40,   15,
   16,   17,   18,   12,   19,   15,   16,   17,   18,   13,
   19,   32,   20,   21,   22,   28,   23,   28,   20,   21,
   22,   28,   23,    8,    8,   27,   33,   27,   65,   69,
   35,   27,    8,   83,   66,   66,   84,   67,   45,   66,
   46,   47,   66,   55,   57,    9,   56,   58,   36,   42,
   79,   11,   59,   74,   77,   64,   78,   85,   73,
};
short yycheck[] = {                                      25,
   31,  260,  261,  262,  263,  264,  265,  266,  268,  268,
  269,  271,   43,  257,  274,  259,  276,  277,  277,  278,
  279,  280,  276,  260,  261,  260,  261,  262,  263,  264,
  265,  266,  269,  268,  269,  257,   62,  259,  268,   70,
   71,  276,  277,  278,  274,  280,  276,  277,   74,  260,
  261,  262,  263,  264,  265,  266,  261,  268,  269,  269,
  260,  261,  280,  273,  269,  276,  277,  278,  262,  263,
  264,  265,  266,  276,  268,  263,  264,  265,  266,  258,
  268,  274,  276,  277,  278,  267,  280,  269,  276,  277,
  278,  273,  280,  260,  261,  267,  274,  269,  267,  267,
  280,  273,  269,  267,  273,  273,  267,  272,  274,  273,
  276,  277,  273,  267,  267,    4,  270,  270,  276,  279,
  275,    7,   34,   61,   66,   44,   67,   82,   60,
};
#define YYFINAL 3
#ifndef YYDEBUG
#define YYDEBUG 0
#endif
#define YYMAXTOKEN 281
#if YYDEBUG
char *yyname[] = {
"end-of-file",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"RES_NAME","COLON","END_RES",
"SEMICOLON","SUM_OP","MULT_OP","SS_PROB","TR_PROB","SS_MEAN","TR_MEAN",
"C_BRACE","OPEN","CLOSE","COND_SIGN","L_NOT","L_AND","L_OR","PLACE_NAME",
"COMP_OP","INTEGER","MARK_PAR","RATE_PAR","EXP","POINT","ERROR",
};
char *yyrule[] = {
"$accept : gram",
"gram : sequence END_RES",
"gram : END_RES",
"sequence : sequence result",
"sequence : result",
"$$1 :",
"result : RES_NAME coord coord COLON $$1 add SEMICOLON",
"$$2 :",
"add : add SUM_OP $$2 fact",
"add : fact",
"$$3 :",
"fact : fact MULT_OP $$3 term",
"fact : fact term",
"fact : term",
"$$4 :",
"term : SS_PROB $$4 logic_cond C_BRACE",
"$$5 :",
"term : TR_PROB $$5 logic_cond C_BRACE",
"$$6 :",
"term : SS_MEAN PLACE_NAME COND_SIGN $$6 logic_cond C_BRACE",
"$$7 :",
"term : TR_MEAN PLACE_NAME COND_SIGN $$7 logic_cond C_BRACE",
"term : SS_MEAN PLACE_NAME C_BRACE",
"term : TR_MEAN PLACE_NAME C_BRACE",
"term : real_val",
"$$8 :",
"term : OPEN $$8 add CLOSE",
"logic_cond : logic_cond L_OR logic_and",
"logic_cond : logic_and",
"logic_and : logic_and L_AND logic_not",
"logic_and : logic_not",
"logic_not : L_NOT logic_term",
"logic_not : logic_term",
"logic_term : OPEN logic_cond CLOSE",
"logic_term : compare",
"$$9 :",
"$$10 :",
"compare : int_expr $$9 COMP_OP $$10 int_expr",
"int_expr : INTEGER",
"int_expr : MARK_PAR",
"int_expr : PLACE_NAME",
"real_val : real",
"real_val : INTEGER",
"real_val : MARK_PAR",
"real_val : RATE_PAR",
"real : rational EXP",
"real : rational",
"$$11 :",
"rational : INTEGER POINT $$11 mant",
"rational : POINT mant",
"mant : INTEGER",
"mant :",
"coord : INTEGER POINT INTEGER",
};
#endif
#ifndef YYSTYPE
typedef int YYSTYPE;
#endif
#ifdef YYSTACKSIZE
#undef YYMAXDEPTH
#define YYMAXDEPTH YYSTACKSIZE
#else
#ifdef YYMAXDEPTH
#define YYSTACKSIZE YYMAXDEPTH
#else
#define YYSTACKSIZE 500
#define YYMAXDEPTH 500
#endif
#endif
int yydebug;
int yynerrs;
int yyerrflag;
int yychar;
short *yyssp;
YYSTYPE *yyvsp;
YYSTYPE yyval;
YYSTYPE yylval;
short yyss[YYSTACKSIZE];
YYSTYPE yyvs[YYSTACKSIZE];
#define yystacksize YYSTACKSIZE
#line 303 "res_stndrd.yacc"

#include "lex.yy.c"

#include "gre_stndrd.c"

#line 252 "y.tab.c"
#define YYABORT goto yyabort
#define YYREJECT goto yyabort
#define YYACCEPT goto yyaccept
#define YYERROR goto yyerrlab
int
yyparse()
{
    register int yym, yyn, yystate;
#if YYDEBUG
    register char *yys;
    extern char *getenv();

    if (yys = getenv("YYDEBUG"))
    {
        yyn = *yys;
        if (yyn >= '0' && yyn <= '9')
            yydebug = yyn - '0';
    }
#endif

    yynerrs = 0;
    yyerrflag = 0;
    yychar = (-1);

    yyssp = yyss;
    yyvsp = yyvs;
    *yyssp = yystate = 0;

yyloop:
    if (yyn = yydefred[yystate]) goto yyreduce;
    if (yychar < 0)
    {
        if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, reading %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
    }
    if ((yyn = yysindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: state %d, shifting to state %d\n",
                    YYPREFIX, yystate, yytable[yyn]);
#endif
        if (yyssp >= yyss + yystacksize - 1)
        {
            goto yyoverflow;
        }
        *++yyssp = yystate = yytable[yyn];
        *++yyvsp = yylval;
        yychar = (-1);
        if (yyerrflag > 0)  --yyerrflag;
        goto yyloop;
    }
    if ((yyn = yyrindex[yystate]) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
    {
        yyn = yytable[yyn];
        goto yyreduce;
    }
    if (yyerrflag) goto yyinrecovery;
#ifdef lint
    goto yynewerror;
#endif
yynewerror:
    yyerror("syntax error");
#ifdef lint
    goto yyerrlab;
#endif
yyerrlab:
    ++yynerrs;
yyinrecovery:
    if (yyerrflag < 3)
    {
        yyerrflag = 3;
        for (;;)
        {
            if ((yyn = yysindex[*yyssp]) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: state %d, error recovery shifting\
 to state %d\n", YYPREFIX, *yyssp, yytable[yyn]);
#endif
                if (yyssp >= yyss + yystacksize - 1)
                {
                    goto yyoverflow;
                }
                *++yyssp = yystate = yytable[yyn];
                *++yyvsp = yylval;
                goto yyloop;
            }
            else
            {
#if YYDEBUG
                if (yydebug)
                    printf("%sdebug: error recovery discarding state %d\n",
                            YYPREFIX, *yyssp);
#endif
                if (yyssp <= yyss) goto yyabort;
                --yyssp;
                --yyvsp;
            }
        }
    }
    else
    {
        if (yychar == 0) goto yyabort;
#if YYDEBUG
        if (yydebug)
        {
            yys = 0;
            if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
            if (!yys) yys = "illegal-symbol";
            printf("%sdebug: state %d, error recovery discards token %d (%s)\n",
                    YYPREFIX, yystate, yychar, yys);
        }
#endif
        yychar = (-1);
        goto yyloop;
    }
yyreduce:
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: state %d, reducing by rule %d (%s)\n",
                YYPREFIX, yystate, yyn, yyrule[yyn]);
#endif
    yym = yylen[yyn];
    yyval = yyvsp[1-yym];
    switch (yyn)
    {
case 5:
#line 46 "res_stndrd.yacc"
{
#ifdef DEBUG
  fprintf(stderr,"\nresult:%s\n", res_name);
#endif
		  ++no_res;
		  new_res = (struct Res_def*)ecalloc(1,sizeof(struct Res_def));
		  new_res->next = NULL;
		  if ( cur_res == NULL )
		      first_res = new_res;
		  else
		      cur_res->next = new_res;
		  cur_res = new_res;
		  cur_res->name = ecalloc(strlen(res_name)+1,1);
		  sprintf(cur_res->name,res_name);
		  cur_res->nprobs = 0;
		  cur_prob = NULL;
		}
break;
case 7:
#line 68 "res_stndrd.yacc"
{
		  sumop[level_op] = yylval;
		}
break;
case 8:
#line 72 "res_stndrd.yacc"
{
		  if ( sumop[level_op] == SUM ) {
		      add_op('+');
		    }
		  else {
		      add_op('-');
		    }
		}
break;
case 10:
#line 84 "res_stndrd.yacc"
{
		  multop[level_op] = yylval;
		}
break;
case 11:
#line 88 "res_stndrd.yacc"
{
		  if ( multop[level_op] == MUL ) {
		      add_op('*');
		    }
		  else {
		      add_op('/');
		    }
		}
break;
case 12:
#line 98 "res_stndrd.yacc"
{
		      add_op('*');
		}
break;
case 14:
#line 105 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'P';
		  cur_prob->num = ++no_pro;
		}
break;
case 16:
#line 112 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'p';
		  cur_prob->num = ++no_pro;
		}
break;
case 18:
#line 119 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'C';
		  cur_prob->num = ++no_pro;
		  cur_prob->val.place = yylval;
		}
break;
case 20:
#line 127 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'c';
		  cur_prob->num = ++no_pro;
		  cur_prob->val.place = yylval;
		}
break;
case 22:
#line 135 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'E';
		  cur_prob->num = ++no_pro;
		  cur_prob->val.place = yylval;
		}
break;
case 23:
#line 142 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'e';
		  cur_prob->num = ++no_pro;
		  cur_prob->val.place = yylval;
		}
break;
case 24:
#line 149 "res_stndrd.yacc"
{
		  add_op('o');
		  cur_prob->type = 'r';
		  cur_prob->val.realval = cur_real;
		}
break;
case 25:
#line 155 "res_stndrd.yacc"
{
		  ++level_op;
		}
break;
case 26:
#line 159 "res_stndrd.yacc"
{
		  --level_op;
		}
break;
case 27:
#line 166 "res_stndrd.yacc"
{
		  add_cond('|');
		}
break;
case 29:
#line 174 "res_stndrd.yacc"
{
		  add_cond('&');
		}
break;
case 31:
#line 182 "res_stndrd.yacc"
{
		  add_cond('~');
		}
break;
case 35:
#line 194 "res_stndrd.yacc"
{
		  add_cond('c');
		  cur_cond->top1 = cur_inttype;
		  cur_cond->op1 = cur_intval;
		}
break;
case 36:
#line 200 "res_stndrd.yacc"
{ switch (yylval) {
		      case EQUAL_TO :
			  cur_cond->type = '=';
			break;
		      case NOTEQUAL_TO :
			  cur_cond->type = 'n';
			break;
		      case GREATER_EQUAL :
			  cur_cond->type = 'g';
			break;
		      case GREATER_THAN :
			  cur_cond->type = '>';
			break;
		      case LESS_EQUAL :
			  cur_cond->type = 'l';
			break;
		      case LESS_THAN :
			  cur_cond->type = '<';
			break;
		    }
		  }
break;
case 37:
#line 222 "res_stndrd.yacc"
{
		  cur_cond->top2 = cur_inttype;
		  cur_cond->op2 = cur_intval;
		}
break;
case 38:
#line 229 "res_stndrd.yacc"
{
		  cur_intval = int_val;
		  cur_inttype = 'i';
		}
break;
case 39:
#line 234 "res_stndrd.yacc"
{
		  cur_intval = MP[yylval-1];
		  cur_inttype = 'i';
		}
break;
case 40:
#line 239 "res_stndrd.yacc"
{
		  cur_intval = yylval;
		  cur_inttype = 'p';
		}
break;
case 42:
#line 247 "res_stndrd.yacc"
{
		cur_real = int_val;
	      }
break;
case 43:
#line 251 "res_stndrd.yacc"
{
		cur_real = MP[yylval-1];
	      }
break;
case 44:
#line 255 "res_stndrd.yacc"
{
		cur_real = RP[yylval-1];
	      }
break;
case 45:
#line 261 "res_stndrd.yacc"
{
	        sprintf(sreal,"1.0e%d ", yylval );
		cur_real = atof(sreal);
		cur_real *= cur_rat;
	      }
break;
case 46:
#line 267 "res_stndrd.yacc"
{
		  cur_real = cur_rat;
		}
break;
case 47:
#line 273 "res_stndrd.yacc"
{
		  sprintf(srat,"%d.", int_val );
		}
break;
case 48:
#line 277 "res_stndrd.yacc"
{
		  strcat(srat,smant );
		  cur_rat = atof(srat);
		}
break;
case 49:
#line 283 "res_stndrd.yacc"
{
		  sprintf(srat,"0.%s",smant);
		  cur_rat = atof(srat);
		}
break;
case 50:
#line 290 "res_stndrd.yacc"
{
	      sprintf(smant,"%d ", int_val );
	    }
break;
case 51:
#line 294 "res_stndrd.yacc"
{
	      sprintf(smant,"0 ");
	    }
break;
#line 667 "y.tab.c"
    }
    yyssp -= yym;
    yystate = *yyssp;
    yyvsp -= yym;
    yym = yylhs[yyn];
    if (yystate == 0 && yym == 0)
    {
#if YYDEBUG
        if (yydebug)
            printf("%sdebug: after reduction, shifting from state 0 to\
 state %d\n", YYPREFIX, YYFINAL);
#endif
        yystate = YYFINAL;
        *++yyssp = YYFINAL;
        *++yyvsp = yyval;
        if (yychar < 0)
        {
            if ((yychar = yylex()) < 0) yychar = 0;
#if YYDEBUG
            if (yydebug)
            {
                yys = 0;
                if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
                if (!yys) yys = "illegal-symbol";
                printf("%sdebug: state %d, reading %d (%s)\n",
                        YYPREFIX, YYFINAL, yychar, yys);
            }
#endif
        }
        if (yychar == 0) goto yyaccept;
        goto yyloop;
    }
    if ((yyn = yygindex[yym]) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn];
    else
        yystate = yydgoto[yym];
#if YYDEBUG
    if (yydebug)
        printf("%sdebug: after reduction, shifting from state %d \
to state %d\n", YYPREFIX, *yyssp, yystate);
#endif
    if (yyssp >= yyss + yystacksize - 1)
    {
        goto yyoverflow;
    }
    *++yyssp = yystate;
    *++yyvsp = yyval;
    goto yyloop;
yyoverflow:
    yyerror("yacc stack overflow");
yyabort:
    return (1);
yyaccept:
    return (0);
}
