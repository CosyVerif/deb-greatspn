Dear XXX
I'm sorry for the delay.
We have finally prepared a version of the GreatSPN package including the MDPN/MDWN to MDP translator
ready to distribute.. 
The GreatSPN  GUI can be used to draw the two PN/WN sumodels that compose a MDPN/WN model: the probabilistic and the non deterministic nets.
Then, the script  mdwn2mdp (in the "bin" directory) can be called to produce the corresponding MDP model (in xml format).

How to install the GreatSPN tool and MDPN/WN to MDP translator.

Refer to the readme file in the  directory SOURCE.
Observe that it requires openmotif(not lestif) library, tcsh, lex and yacc (not bison).

How to use the tool.

The GreatSPN manual (that can be downloaded from http://wwww.di.unito.it) is a good starting point. 
Moreover, the MDPN/MDWN formalism needs some further information besides the description of the structure of the two PN/WN submodels. Part of this information is included in the model description files (see items (1) and (2) below), part is instead
stored in a separate file (to be generated with a text editor, see item (3) below).

1) list of components (controllable/not controllable).	
Each component has a name in the form CCi  if it is controllable, NCi if it is not controllable. 
The Global component is instead identified using the name GL. If the model is a MDWN, the components have to be 
specified as colored markings with the corresponding names, moreover these names appear in the labels of the
transitions as explained hereafter and illustrated in the examples.

2) the attributes associated with each transition are specified in the transition name in the following format:

<transition_name> ::= <name> '|' <block_list>
<block_list>  ::= <block_attributes> ',' <block_list> | <block_attributes>
<block_attribute> ::= '<' <transition_type> ',' <id_component> ','  '>' | '<' <transition_type> ',' <id_component> ',' <binding_color> '>'
<transition_type> ::=  'Stop' | 'Run'
<id_component> ::= component identification (e.g. CC1)
<binding_color> ::= it speciﬁes how  the components related to the transition are deﬁned through the transition color (e.g. x).
<name> :: a string encoding the transition name.

3)reward definition:
it has to be defined in a file with name: <model_name>ProbGL.reward according to the following grammar:

<rewardG> ::= <reward_block> |<reward_block> "\n" <rewardG>
<reward_block> ::= 'P' <place_name>  <reward> |'T' <transition_name>  <reward> | F <reward> '(' <condition_block> ')' 
<condition_block> ::= <bl> | <bl> '|'  <condition_block>
<bl> ::= <place_name> <op> <tokens>
<place_name> ::= place identification
<transition_name> ::= transition identification
<reward> ::= integer
<tokens> ::= integer
<op> ::= '>' | '<' | '=' 

We have prepared three examples (two MDWN models, "ColSemplice" and "ComplProcMem", and one MDPN model "Semplice"), which  should be useful to understand how to define a MDWN/MDPN model.
For each example model <model_name> five files are included: <model_name>Nond.net/.def, <model_name>Prob.net/.def and <model_name>ProbGL.reward

These examples can be run  as follows:
mdwn2mdp ./MDWNexample1/ColSempliceProb ./MDWNexample1/ColSempliceNond 
mdwn2mdp ./MDWNexample2/ComplProcMemProb ./MDWNexample2/ComplProcMemNond
mdwn2mdp ./MDPNexample/SempliceProb ./MDPNexample/SempliceNond  

Finally we are preparing another tool to be distributed with the MDPN/WN to MDP translator, 
which  can solve the MDP generated by the translator using the GraphMDP library.  
I'm available for any question.

Best Regards




 
