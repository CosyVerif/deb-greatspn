/*
 * command.c
 */



#include "global.h"
#include "infodialog.h"
#include "trap.h"
#include "deadl.h"
#include "ecs.h"
#include "res.h"
#include "tinv.h"
#include "pinv.h"
#include "sc.h"
#include "unbound.h"
#include "me.h"
#include "inputdialog.h"
#include "menuinit.h"
#include "parse.h"
#include "optionsdialog.h"

/* #include <varargs.h> */
#include <stdarg.h>

#if defined(SunOS5x)
#	include <wait.h>
#else
#	include <sys/wait.h>
#endif
#include <sys/time.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/resource.h>
#include <sys/param.h>
#include <signal.h>
#include <unistd.h>
#include <fcntl.h>

#ifndef MAXHOSTNAMELEN
#	include <netdb.h>
#endif

static char ** ShellErrors;
static int whichcalc;

static void solve_handler(  );
static void deadl_handler(  );
static void trap_handler(  );
static void pinv_handler(  );
static void tinv_handler(  );
static void ecsets_handler(  );
static void sbound_handler( );
extern XtAppContext	appContext;
extern reset_object();
extern int merging;
extern char * curfile;
static Widget bell_global_item;
static int fd[2];
static FILE * fpipe;
static char *pipeName;

static char     command[LINEMAX];
static int      exstat;

Widget      host_name_item;
char           *nets_dir_path;

static          solve_com(char*,...);
static          solve_com2(char*,...);

static int      complain;
static void(*___handler)();
static XtWorkProcId wpID;

static char * message1;
static char * message2;
int (* collect_func)();

extern Widget msg_popup_f;
extern Widget GetConsoleWidget();
extern void ShowConsoleDialog();
#define MAX_SHELL_ERRORS	255
#define KILLEDBYUSER	1000

static char * OKMessages[]=
{
	"P-invariants obtained",
	"T-invariants obtained",
	"Minimal Deadlocks obtained",
	"Minimal Traps obtained",
	"E-conflit sets obtained",
	"Structural Boundedness obtained",
	"TRG solution obtained",
	"EMC solution obtained",
	"GSPN Steady State solution obtained",
	"GSPN Transient solution obtained",
	"SWN Symbolic Simulation completed",
	"SWN Symbolic RG solution obtained",
	"SWN Ordinary Simulation completed",
	"SWN Ordinary RG solution obtained"
};
	

static int CheckForDeadRemoveChild(int p)
{
	int status,ret;
	struct rusage rus;
	
	if((ret = wait3(&status,WNOHANG,&rus))!=0)	/* non blocking wait for child p */
	{
		char message[1000];   
		int errCode;
		
		ClearWaitCursor(mainwin);
		errCode = WEXITSTATUS(status);
		printf("errCode = %d, status = %d\n",errCode,status);

		if(errCode)
		{
			strcpy(message ,"Error removing result files");
			ShowErrorDialog(message,mainwin);
		}		
	 	res_visible=FALSE;
   		redisplay_canvas();
		return TRUE;
	}
	return FALSE;
}

void DoRemoveRes(int k)
{   
	SetWaitCursor(mainwin);
  
   XtAppAddWorkProc(appContext,(XtWorkProc)CheckForDeadRemoveChild,0);
   switch(fork())
   {
      case 0:
      {
         static char * what[]={"Res","All"};
      	char temp[3000];

			sprintf(temp,"%s/Remove%sCommand",getenv("GSPN2HOME"),what[k]);
			printf("Executing /bin/csh -f %s %s\n",temp,GetCurrentFilename());
			execl("/bin/csh","-f",temp,GetCurrentFilename(),(char *)0);
			break;
		}
		case -1:
			ShowErrorDialog("Sorry : cannot fork",mainwin);
			break;
   }
}

void DoRemoveResCB(Widget w,XtPointer call_data,XtPointer client_data)
{
   DoRemoveRes(0);
}

void DoRemoveAllCB(Widget w,XtPointer call_data,XtPointer client_data)
{
   DoRemoveRes(1);
}

void RemoveResProc(int k)
{
   char *message[]=
   { "Warning this operation wiill remove the RESULTS files !",
     "Warning this operation wiill remove ALL the net files !"};

	if((char *)GetCurrentFilename() == NULL)
      return;
     
   ShowWarningDialog(message[k],k ? DoRemoveAllCB:DoRemoveResCB,NULL,"Ok","Cancel",1);
}




char * GetShellErrorMessage(int status)
{
	char * retval;
	
	if(status<MAX_SHELL_ERRORS)
	{
		static char codemess[30];

		retval = ShellErrors[status];

		if(retval == NULL)
		{
			sprintf(codemess,"???? (code %d)",status);
			retval = codemess;
		}
	}
	else
		retval = "Shell Error Reporting System is not working Properly";
   puts(retval);
	return retval;
}


void TerminationHandler(int status)
{
	if(status)
	{
		char message[3000];
		
		if(status != KILLEDBYUSER)
			sprintf(message,"Solution failed in module %s", GetShellErrorMessage(status) );
	    else
			strcpy(message,"Process Terminated by user");
		
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else
	
	{
		switch(whichcalc)
		{
			case 0:
				CollectPinvar(TRUE);
				break;
			case 1:
				CollectTinvar(TRUE);
				break;
			case 2:
				CollectDeadl(TRUE);
				break;
			case 3:
				CollectTrap(TRUE);
				break;
			case 4:
				CollectEcsSets(TRUE);
				break;
			case 5:
				CollectUnbound(TRUE);
				break;
			case 6:
			case 7:
			case 8:
			case 9:
				if(complain)
					CollectRes(complain);
				break;
			case 10:
			case 11:
			case 12:
			case 13:
				CollectRes(FALSE);
			default:
		}
		if(whichcalc <= 13)
			ShowInfoDialog(OKMessages[whichcalc],GetConsoleWidget());
	}
}

void InitGSPNShellErrors(void)
{
	char confFile[1000];
	Boolean parseErr;
	struct stat tmp;
	FILE * cfin;
	int i;

	ShellErrors = (char **)emalloc(sizeof(char *)*MAX_SHELL_ERRORS);

	for(i=0;i<MAX_SHELL_ERRORS;i++)
		ShellErrors[i]=NULL;
	
	sprintf(confFile,"%s/../GreatConfig",getenv("GSPN2HOME"));
	if(stat(confFile,&tmp))
	{
		if(errno == ENOENT)
		{
			ShowInfoDialog("Warning: GreatConfig configuration file not found\nShell Errors will be unclear",mainwin);
		}
	}
	else
	{
	
		if((cfin = fopen(confFile,"rt")) != NULL)
		{
			int fileLine;
			
			parseErr = FALSE;
			fileLine = 0;
			
			while(!feof(cfin) && !parseErr)
			{
				char * parsed;
				char commandName[1000];
				char buffLine[132];
				int code;
				
				fgets(buffLine,sizeof(buffLine),cfin);
				fileLine++;
				parsed = LTrim(buffLine);
				switch(*parsed)
				{
					case '@':	
						break;
					case '\0':	
						break;
					default:
						if(sscanf(parsed,"%d %s",&code,commandName) != 2)
						{
							char msg[100];
							
							sprintf(msg,"Error Parsing Configuration file Line %d",fileLine);
							ShowErrorDialog(msg,mainwin);
							parseErr = TRUE;
						}
						else
						{
							if(code < MAX_SHELL_ERRORS)
								ShellErrors[code] = strdup(commandName);
							else

							{
								char msg[400];
						
								sprintf(msg,"Warning  Error code too high in Line %d",fileLine);

								ShowErrorDialog(msg,mainwin);
							}
						}
				}
			}
			fclose(cfin);
		}
		else
		{
			ShowErrorDialog("Error: cannot open ~/.GreatConfig configuration file",mainwin);
		}
	}
}
static
set_bell_global_proc(item, value, event)
Widget      item;
unsigned int    value;
XEvent          *event;
{
	if (inib_flag)
	return;
	bell_global_on = (int) (value & 0x1);
}

static void CancelGetTotTimeCB(Widget w, XtPointer closure,XtPointer call_data)
{
	ResetConsoleDialog();
}

static void GetTotTimeCB(Widget w, XtPointer par2,XtPointer call_data)
{

	float           num;
	int             increm = FALSE;
	char num_buf[20];
	char * totime;
	char ** tobuffer = (char **)par2;
	
	totime = *tobuffer;
	puts(totime);
	while (*totime == ' ')
	totime++;
	if (*totime == '+') {
	increm = TRUE;
	while (*++totime == ' ');
	}
	if (*totime < '0' || *totime > '9') {
	put_msg(2,"Error : time must be a positive number.");
	XtFree(totime);
	return;
	}
	sscanf(totime, "%f", &num);
	if (increm)
	num = -num;
	sprintf( num_buf, "%f", num );
	complain = 2;
	XtFree(totime);
	solve_com( "...SOLVING...", solve_handler, "randomTR", curfile, num_buf, (char *)0 );

}




void restore_proc()

{
	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	if (action_on && (cur_command != ADD || cur_object == IMTRANS)
	&& cur_command != SELECT && cur_command != MOVE) 
	{
	next_msg(2,cant_interrupt);
	/*	if (bell_global_on)
		window_bell(menu_sw); */
	return;
	}
	puts("Undo");
	restore_obj();
	/*	cur_command = NULL_CHOICE;
	cur_object = NULL_CHOICE;
	menu_action();*/
}



static
clear_proc(item, event)
Widget      item;
XEvent      *event;
{
	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	if (selection_on || action_on) {
	next_msg(2,cant_interrupt);
	/*	if (bell_global_on)
		window_bell(menu_sw);*/
	return;
	}
	clear_proc_f();
	redisplay_canvas();
}

clear_proc_f()
{
	ClearRes();
	ClearPinv();
	ClearDeadl();
	ClearTrap();
	ClearTinv();
	ClearEcs();
	ClearSc();
	ClearMe();
	ClearUnbound();
	free_bkup_netobj();
	bkup_netobj[0] = netobj;
	netobj = NULL;
	init_net();
	ResetGrill();
	ResetZoom();
	flag_tinv = 1;
	flag_pinv = 1;
	ResetModify();
	setup_initialstate();
	ReinitializeLayers();
	Reset_T_P_Popups();

}

clear_proc_m()
{
	ClearRes();
	ClearPinv();
	ClearDeadl();
	ClearTrap();
	ClearTinv();
	ClearEcs();
	ClearSc();
	ClearMe();
	ClearUnbound();
	flag_tinv = 1;
	flag_pinv = 1;
/*	ResetModify();*/
}

static int killed;
static XtInputId IID;

void
InputCB(client_data, source, id) 
XtPointer client_data;
int *source;
XtInputId *id;
{
	char line[10000];

		if(!feof(fpipe))
		{
			if(fgets(line,sizeof(line),fpipe) != NULL)
				ShowLine(line);
		}
		else
		{
		   XtRemoveInput(*id);
		   /*NotifyProcessTermination();*/
                   fclose(fpipe);
                   unlink(pipeName);
		}

}


int CheckForDeadChild2(p)
	int p;
{
	int status,ret;
	char *k;
	char line[300];
	
#ifdef __HP_SOURCE	
	int reserved;	
#else
	struct rusage rus;
#endif
	
#ifdef __HP_SOURCE	
	if((ret = wait3(&status,WNOHANG,&reserved))!=0)	/* non blocking wait for child p */
#elif  defined(SunOS5x)
        if ( (ret = (int)waitpid((pid_t)p,&status,WNOHANG)) > 0 )
	   /* non blocking wait for child p */
#else
	if((ret = wait3(&status,WNOHANG,&rus))!=0)	/* non blocking wait for child p */
#endif
		{
		/* Some child has died  (r.i.p.) */
#ifdef DEBUG
    fprintf(stderr,"Child died? wait ret = %d\n",ret);
#endif
                if ( ret != p )
		    return FALSE;
		fflush(stdout);
		TerminationHandler( WEXITSTATUS(status));
		return TRUE;
	}
	return FALSE;
}


 

void SetDiedChildHandler2(h,p)
void (*h)();
	int p;
{
	___handler =  h;
	
	printf("SetDiedChildHandler2 %d\n",getpid());
	wpID = XtAppAddWorkProc(appContext,(XtWorkProc)CheckForDeadChild2,(XtPointer)p);
	printf("Installing handler2 for %d\n",p);
}

void MySignalHandler(status)
	int status;
{
	printf("MySignalHandler %d\n",status);

}

static void
SwnSymSimHandler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Simulation failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("Simulation successfully completed",GetConsoleWidget());
	}
}

ScheduleSwn(int whichHandler,int p1,int p2,int p3,int p4,int p5,int p6,int p7,int p8)
{
	char s1[30];							
	char s2[30];							
	char s3[30];							
	char s4[30];							
	char s5[30];							
	char s6[30];							
	char s7[30];							

	printf("ScheduleSwn = %d\n",whichHandler);
	if(!(whichHandler & 0x1))
	{
		sprintf(s1,"%d",p1);
		sprintf(s2,"%d",p2);
		sprintf(s3,"%d",p3);
		sprintf(s4,"%d",p4);
		sprintf(s5,"%d",p5);
		sprintf(s6,"%d",p6);
		sprintf(s7,"%d",p7);
	}
	
	switch(whichHandler)
	{
		case 0:		
			if(p8)
				solve_com("Starting SWN ", SwnSymSimHandler, "swn_sym_sim", GetCurrentFilename(),
						  "-f",s1,"-t",s2,"-m",s3,"-M",s4,"-c",s5,"-a",s6,"-s",s7, "-o","0",(char*)0);
			else
				solve_com("Starting SWN ", SwnSymSimHandler, "swn_sym_sim", GetCurrentFilename(),
						  "-f",s1,"-t",s2,"-m",s3,"-M",s4,"-c",s5,"-a",s6,"-s",s7, (char*)0);
			break;
		case 1:
			solve_com("Starting SWN ", SwnSymSimHandler, "swn_sym_rg", GetCurrentFilename(),p1 ? "-o":(char*)0, (char*)0);
			break;
		case 2:
			if(p8)
				solve_com("Starting SWN ", SwnSymSimHandler, "swn_ord_sim", GetCurrentFilename(),
						  "-f",s1,"-t",s2,"-m",s3,"-M",s4,"-c",s5,"-a",s6,"-s",s7, "-o","0",(char*)0);
			else
				solve_com("Starting SWN ", SwnSymSimHandler, "swn_ord_sim", GetCurrentFilename(),
						  "-f",s1,"-t",s2,"-m",s3,"-M",s4,"-c",s5,"-a",s6,"-s",s7, (char*)0);
			break;
		case 3:
			solve_com("Starting SWN ", SwnSymSimHandler, "swn_ord_rg", GetCurrentFilename(),p1 ? "-o":(char*)0, (char*)0);
			break;
	}
}

static void
lpbound_handler(status)
int status;
{
	puts("lpbound_handler");
	if (status) 
	{
		ShowErrorDialog("ERROR: couldn't prepare LPP file!\n",GetConsoleWidget());
	}
}


void Solve(void)
{
	switch(whichcalc)
	{
		case 0:
			solve_com("computing P-invariants", pinv_handler, "pinv", curfile, (char*)0);
			break;
		case 1:
			solve_com("computing T-invariants", tinv_handler, "tinv", curfile, (char*)0);
			break;
		case 2:
			solve_com("computing minimal Deadlocks", deadl_handler, "deadl", curfile, (char*)0);
			break;
		case 3:
			solve_com("computing minimal Traps", trap_handler, "traps", curfile, (char*)0);
			break;
		case 4:			
			solve_com("computing E-conflict sets", ecsets_handler, "struct", curfile, (char*)0);
			break;
		case 5:
			solve_com("computing structural boundedness", sbound_handler, "sbound", curfile, (char*)0);
			break;
		case 6:
			complain = 1;
			solve_com("solving TRG", solve_handler, "checkRG", curfile, (char*)0);
			break;
		case 7:
			complain = 1;
			solve_com("solving EMC", solve_handler, "newMT", curfile, (char*)0);
			break;		
		case 8:
			complain = 2;
			solve_com("Solving GSPN Steady State", solve_handler, "newSO", curfile, "-s10", (char*)0);
			break;		
		case 9:
			complain = 1;
			ShowInputDialog("transient time (+ to increment previous value) ",CancelGetTotTimeCB,GetTotTimeCB,GetConsoleWidget());
			break;
		case 10:
			ShowSwnSimOptionsDialog(0);
			break;
		case 11:
			ShowSwnRGOptionsDialog(0);
			break;
		case 12:
			ShowSwnSimOptionsDialog(1);
			break;
		case 13:
			ShowSwnRGOptionsDialog(1);
			break;

	}
}

void SaveAndRetry(void)
{
	SaveAndExec(ShowConsoleDialog);
}

void MainSolve(which)
	int which;
{
	whichcalc = which;
	if(curfile == NULL && !figure_modified)
	{
		ShowErrorDialog("Invalid Net Name",frame_w);
		return;
	}
	else
		if (figure_modified) 
		{
			ShowWarningDialog("The net must be saved to perform the requested calculations.\n\nDo you want to SAVE the net ?",(XtCallbackProc)SaveAndRetry,NULL,"Save","Cancel",0);
			return;
		}
	
	ShowConsoleDialog();
	
	/*SelectSolve();*/
}



/*
static Notify_value
lpbound_handler( me, pid, status, rusage )
Notify_client me;
int pid;
union wait * status;
struct rusage *rusage;
{
	if ( (status->w_status >> 8) & 0xff ) {
	put_msg(2, "ERROR: couldn't prepare LPP file!\n");
	  }
	xv_set(frame_w, FRAME_BUSY, FALSE, NULL);
	xv_set(msg_popup_f, FRAME_BUSY, FALSE, NULL);
}
*/

void PrepareLPMark(void)
{
	whichcalc = 20;
	solve_com2("Preparing LPP file", lpbound_handler, "lpmark",  curfile, (char*)0);
}
void PrepareLPBounds(void)
{
	whichcalc = 21;
	solve_com2("Preparing LPP file", lpbound_handler, "lpbound",  curfile, (char*)0);
}

prepare_lp_mark()
{/*


	nets_dir_path = getenv("PWD");
	sprintf(edit_file, (char *)
	xv_get(	net_name_item,PANEL_VALUE));
	solve_com("Preparing LPP file", lpbound_handler, "lpmark",
			  edit_file, nets_dir_path, (char*)0);
*/
}


prepare_lp_bounds()
{/*

	nets_dir_path = getenv("PWD");
	sprintf(edit_file, (char *)
	xv_get(	net_name_item,PANEL_VALUE));
	solve_com("Preparing LPP file", lpbound_handler, "lpbound",
			  edit_file, nets_dir_path, (char*)0);
*/
}


static Widget  invar_menu;

static
invar_proc(item, event)
Widget      item;
XEvent          *event;
{
	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	if (selection_on || action_on) {
	next_msg(2,cant_interrupt);
	/*	if (bell_global_on)
		window_bell(menu_sw);*/
	return;
	}
 /*	menu_show(invar_menu, menu_sw, event, 0);*/
}

static Widget     solve_menu;

typedef void (*func_ptr)();


void temppp(w, client_data, call_data )
    Widget	w;
    int	client_data;
    caddr_t	call_data;

{
	puts("Interrupted ...");
}


#if defined(SunOS5x) || defined(Linux)
    static pid_t child;
#else
    static 	int child;
#endif

void KillJob()
{
   /*	killed=!kill(child,SIGINT); */
#ifdef SunOS5x
	killed=!kill(child,SIGTERM);  
#else
	killed=!kill(child,SIGTERM); /*!killpg(child,SIGTERM);*/  
#endif
	printf("Killed %d\n",killed);
}

	
#define MAXARGS 20

static
XtSignalId SIGCHLD_Notify_Signal;

void SIGCHLD_handler(sig_id)
int sig_id;
{
   signal(SIGCHLD, (void (*)(int))SIGCHLD_handler);
   XtNoticeSignal(SIGCHLD_Notify_Signal);
}

void SIGCHLD_Callback(XtPointer client_data, XtSignalId *id)
{
   int status,ret;
   char *k;
   char line[300];
   struct rusage *rus;
   int stat;

   fflush(stdout);
/*   XtRemoveInput(IID); */
   XtRemoveSignal(SIGCHLD_Notify_Signal);

/*
   while(!feof(fpipe))
		{
			k=fgets(line,sizeof(line),fpipe);
			if(k!=NULL)
				ShowLine(line);
			else
				break;
		}

   fclose(fpipe);
   unlink(pipeName);
*/
   NotifyProcessTermination();
   TerminationHandler(killed ? KILLEDBYUSER :(WIFEXITED(status)?
		    WEXITSTATUS(status):0));

   wait3(&stat, WNOHANG, &rus);

   printf("killing child %d\n", child);
   if ( kill(child, SIGKILL)==-1)
      printf("Problems to kill it\n");
}

static
solve_com( char * msg1, ... )
{
	
	va_list args;
	
	char * argv[MAXARGS];
	int argc = 0;
	char * p;
	char userHostname[MAXHOSTNAMELEN];
	char buf[1000];
	char filename[300];
	int status;
	int retval;
	int maxfds ;
	unsigned i;
	static int my_client_object;
	func_ptr handler;
	struct stat     stb;


        SIGCHLD_Notify_Signal = XtAppAddSignal(appContext,
                                               (XtSignalCallbackProc)SIGCHLD_Callback,
                                               (XtPointer)NULL);


        signal(SIGCHLD, (void (*)(int))SIGCHLD_handler);
	
	maxfds = (int)sysconf(_SC_OPEN_MAX);
	
	va_start(args, msg1);
	handler = va_arg( args, func_ptr );
	
	strcpy(userHostname,optGetHostname());
	
	Gspn = getenv("GSPN2HOME");
	
	if ( strcmp( userHostname, host_name ) == 0 ) 
	{
	/*	argv[argc++] = "/bin/csh"; */ ;
	}
	else 
	{
		argv[argc++] = "/usr/ucb/rsh";
		argv[argc++] = userHostname;
	/*	argv[argc++] = "csh";*/
	}
	sprintf( buf, "%s/%s", Gspn,va_arg( args, char * ) );
	argv[argc] = buf;
	
	do 
	{
		p = va_arg( args, char * );
		va_end(args);
		argv[++argc] = p;
	} while ( p );
	
	/* va_end( args ); */
	
#ifdef DEBUG
	for ( i = 0; i < argc ;
	      fprintf(stderr,"... solve_com: argv[%d] = %s\n",i,argv[i]), i++ );
#endif
	
	killed=FALSE;
	/*
	if(!stat("__GSPN_CONSOLE_PIPE__",&stb))
	if(unlink("__GSPN_CONSOLE_PIPE__"))
	{
	ShowErrorDialog("Severe Error: an old Pipe has been found but I can't erase it", GetConsoleWidget());
	return;
	}
	*/
	
#ifdef DEBUG
	fprintf(stderr," ... solve_com: making pipeName\n");
#endif
	pipeName = tmpnam(NULL);
	puts(pipeName);
	if(mkfifo(pipeName,0777))
	{
		ShowErrorDialog("Severe Error: cannot create the Pipe", GetConsoleWidget());
		return;
	}
	
#ifdef __HP_SOURCE	
	setpgrp();
#else
#  if defined(Linux) || defined(SunOS5x)
	setpgrp();
#  else
	setpgrp(0,0);
#  endif
#endif
#ifdef DEBUG
	fprintf(stderr," ... solve_com: forking\n");
#endif
	child = fork();
	
	switch( child ) 
	{
		case -1:
			ShowErrorDialog("Sorry : cannot fork -- ",frame_w);
			break;
		case 0:
			{
				char temp[300];
#ifdef DEBUG
	fprintf(stderr," ... solve_com (child): opening pipe\n");
#endif

				close( 1 );
				fd[1] = open(pipeName,O_WRONLY);
                                /*dup2(1,fd[1]);*/
				close( 2 );
				dup(fd[1]);
				for ( i = 3; i < maxfds; ++i )
				{
					close( i );
				}
				
				execv( argv[0], argv );
				
				sprintf( temp, "GreatSPN: Cannot exec %s", argv[0] );
				ShowErrorDialog(temp,frame_w);
				
			}
			break;



		default:
#ifdef DEBUG
	fprintf(stderr," ... solve_com (parent): opening pipe\n");
#endif
			fd[0] = open(pipeName,O_RDONLY | O_NDELAY);			
			fpipe=fdopen(fd[0],"r");
			IID=XtAppAddInput(appContext,fileno(fpipe),(XtPointer)XtInputReadMask,(XtInputCallbackProc)InputCB,NULL);
#ifdef DEBUG
	fprintf(stderr," ... solve_com (parent): setting child handler\n");
#endif
		 	/* SetDiedChildHandler(handler,child); */
			
	                ___handler =  handler;
	                printf("SetDiedChildHandler %d\n",getpid());
	                printf("Installing handler for %d\n",p);
			break;
			
	}
}


static
solve_com2( char * msg1, ... )
{
	
	va_list args;
	
	char * argv[MAXARGS];
	int argc = 0;
	char * p;
	char userHostname[MAXHOSTNAMELEN];
	char buf[1000];
	char filename[300];
	int status;
	int retval;
	int maxfds ;
	unsigned i;
	static int my_client_object;
	func_ptr handler;
	struct stat     stb;
	
	
	
	maxfds = (int)sysconf(_SC_OPEN_MAX);
	
	va_start( args, msg1 );
	handler = va_arg( args, func_ptr );
	
	strcpy(userHostname,optGetHostname());
	
	Gspn = getenv("GSPN2HOME");
	
	if ( strcmp( userHostname, host_name ) == 0 ) 
	{
		argv[argc++] = "/bin/csh";
	}
	else 
	{
		argv[argc++] = "/usr/ucb/rsh";
		argv[argc++] = userHostname;
		argv[argc++] = "csh";
	}
	sprintf( buf, "%s/%s", Gspn,va_arg( args, char * ) );
	argv[argc] = buf;
	
	do 
	{
		p = va_arg( args, char * );
		va_end( args );
		argv[++argc] = p;
	} while ( p );
	
	
#ifdef DEBUG
	for(i=0;i<argc;printf("solve_com2: argv[%d] = %s\n",i,argv[i]),i++);
#endif
	
	SetDiedChildHandler2(handler,child);
	killed=FALSE;
	
	child = fork();
	
	switch( child ) 
	{
		case -1:
			ShowErrorDialog("Sorry : cannot fork -- ",frame_w);
			break;
		case 0:
			{
				char temp[300];
				for ( i = 3; i < maxfds; ++i )
				{
					close( i );
				}
							
				execv( argv[0], argv );
					
				sprintf( temp, "GreatSPN: Cannot exec %s", argv[0] );
				ShowErrorDialog(temp,frame_w);
				
			}
			break;
		default:
			break;
	}
}















/**********************************************************************************
 *                  
 *
 *
 *
 **********************************************************************************/

static void
pinv_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("P-invariants obtained",GetConsoleWidget());
		CollectPinvar(TRUE);
	}
}

static void
tinv_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("T-invariants obtained",GetConsoleWidget());
		CollectTinvar(TRUE);
	}
}

static void
deadl_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("Minimal Deadlocks obtained",GetConsoleWidget());
	    CollectDeadl(TRUE);
	}
}

static void
solve_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("  ... SOLUTION OBTAINED ...",GetConsoleWidget());
		if ( complain )
			CollectRes(complain);
	}
}

static void
trap_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("Minimal Traps obtained",GetConsoleWidget());
		CollectTrap(TRUE);
	}
}

static void
ecsets_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("E-conflit sets obtained",GetConsoleWidget());
		CollectEcsSets(TRUE);
	}
}

static void
sbound_handler(status)
int status;
{
	if (status) 
	{
		char message[300];
		sprintf(message,"Solution failed, exit value %d", status );
		ShowErrorDialog(message,GetConsoleWidget());
	}
	else 
	{
		ShowInfoDialog("...Solution Obtained...",GetConsoleWidget());
		CollectUnbound(TRUE);
	}
}


static
gspn_rg_proc(m, mi)
Widget            m;
Widget       mi;
{
	/*
	complain = 1;
	nets_dir_path = getenv("PWD");
	sprintf(edit_file, (char *)
			xv_get(
					net_name_item,PANEL_VALUE));
	solve_com("... SOLVING ...", solve_handler, "checkRG", edit_file,
			  nets_dir_path, (char*)0);
*/
}


static
gspn_mt_proc(m, mi)
Widget            m;
Widget	   mi;
{
	/*
	complain = 1;
	nets_dir_path = getenv("PWD");
	sprintf(edit_file, (char *)
	xv_get(	net_name_item,PANEL_VALUE));
	solve_com("... SOLVING ...", solve_handler, "newMT", edit_file,
			  nets_dir_path, (char*)0);
*/
}


static
gspn_gs_proc(m, mi)
Widget            m;
Widget       mi;
{
	/*
	complain = 2;
	nets_dir_path = getenv("PWD");
	sprintf(edit_file, (char *)
	xv_get(net_name_item,PANEL_VALUE));
	solve_com("... SOLVING ...", solve_handler, "newSO", edit_file,
			  nets_dir_path, "-s10", (char*)0);
*/
}

static
gspn_tr_proc(m, mi)
Widget            m;
Widget       mi;
{
	/*	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	if (selection_on || action_on) {
	next_msg(2,cant_interrupt);
	return;
	}
	receiver = get_totime;
	init_msgreceiving("transient time (+ to increment previous value): ");*/

}


static
solve_proc(item, event)
Widget      item;
XEvent          *event;
{
	/*
	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	if (selection_on || action_on) {
	next_msg(2,cant_interrupt);
	if (bell_global_on)
		window_bell(menu_sw);
	return;
	}
	menu_show(solve_menu, menu_sw, event, 0);
	*/
}


static Widget paste_button;
static Widget mirror_button;


paste_proc()
{
	if (inib_flag)
		return;
	if (receiving_msg)
		return;
	if (moving_images != NULL) {
		prev_x = select_left;
		prev_y = select_top;
		drop_selected((int) select_left, (int) select_top, netobj);
	}
   merging=0;
   reset_object();
	menu_action();
}


mirror_proc()
{
	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	cur_command = MIRROR;
	menu_action();
}

static Widget modify_button;
static Widget     modify_menu;

static
modify_proc(item, event)
Widget      item;
XEvent          *event;
{
	if (inib_flag)
	return;
	if (receiving_msg)
	return;
	/*	menu_show(modify_menu, menu_sw, event, 0); */
}


modify_menu_procCB(w,mitem,call_data)
Widget			w;
caddr_t call_data;
short mitem;

{

	if (inib_flag)
 	  return;
	modify_selected(mitem);

}


void InitCommands(void)
{
	gethostname(host_name,LINEMAX);
    init_simpan();
    /*init_fire();*/
}
